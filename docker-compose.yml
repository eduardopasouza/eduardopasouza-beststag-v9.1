version: '3.8'

services:
  ## === Postgres para BestStag ===
  postgres:
    image: postgres:14
    container_name: beststag_postgres
    restart: always
    environment:
      POSTGRES_USER: beststag_user
      POSTGRES_PASSWORD: SenhaForte123!
      POSTGRES_DB: beststag_db
    ports:
      - "5432:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data

  ## === Redis (cache/queue) ===
  redis:
    image: redis:6
    container_name: beststag_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ./redisdata:/data

  ## === n8n (orquestrador de workflows) ===
  n8n:
    image: n8nio/n8n:latest
    container_name: beststag_n8n
    restart: always
    environment:
      # Configurações básicas de acesso
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http

      # Autenticação básica (defina N8N_USER e N8N_PASSWORD no seu .env ou exporte antes de iniciar)
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}

      # Armazenamento em PostgreSQL (para históricos de execução, credenciais, etc.)
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=beststag_db
      - DB_POSTGRESDB_USER=beststag_user
      - DB_POSTGRESDB_PASSWORD=SenhaForte123!

      # Armazenamento em Redis (para filas ou cache, se necessário)
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "5678:5678"
    volumes:
      - ~/.n8n:/home/node/.n8n
    depends_on:
      - postgres
      - redis

# Se futuramente quisermos rodar o backend BestStag em contêiner, podemos adicionar algo como:
#  backend:
#    build:
#      context: ./src/backend
#      dockerfile: Dockerfile
#    container_name: beststag_backend
#    restart: always
#    environment:
#      - DATABASE_URL=postgresql://beststag_user:SenhaForte123!@postgres:5432/beststag_db
#      - REDIS_URL=redis://redis:6379
#      - ABACUS_API_KEY=${ABACUS_API_KEY}
#      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
#      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
#      - TWILIO_WHATSAPP_NUMBER=${TWILIO_WHATSAPP_NUMBER}
#      - N8N_WEBHOOK_URL=${N8N_WEBHOOK_URL}
#    ports:
#      - "8000:8000"
#    depends_on:
#      - postgres
#      - redis
#      - n8n

# Observações:
# 1. Mantenha apenas uma seção 'version:' e um bloco único 'services:'.
# 2. Crie um arquivo .env na raiz do projeto contendo:
#      N8N_USER=seu_usuario_n8n
#      N8N_PASSWORD=sua_senha_n8n
#      ABACUS_API_KEY=s2_f111f4d804dc43709d3842e6ea04688d
#      TWILIO_ACCOUNT_SID=AC5a1d48ee5db3717b8e867af9c504ccf0
#      TWILIO_AUTH_TOKEN=8a651d4e550d491814642692f517c4b0
#      TWILIO_WHATSAPP_NUMBER=whatsapp:+14786062712
#      REDIS_CLOUD_API_KEY=Av04w6pqpyae2xn680avj5u6vbu4re5jryv41f7mgum8vyrm4
#    (adapte conforme suas chaves e nomes de variáveis necessários)
#
# 3. Para subir apenas o Postgres:
#      docker-compose up -d postgres
#
# 4. Para subir Redis e n8n junto:
#      docker-compose up -d redis n8n
#
# 5. Se for adicionar o próprio backend BestStag em Docker, descomente o bloco `backend:` e crie um Dockerfile dentro de src/backend/ apontando para a aplicação FastAPI.
