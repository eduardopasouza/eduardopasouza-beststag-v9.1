#!/usr/bin/env python3
"""
Script de teste para validar a Fase 2 do BestStag v9.1 + Abacus.AI
IA Contextual e Front-end Inteligente
"""

import os
import sys
import json
import asyncio
from datetime import datetime
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Adicionar o diret√≥rio python ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'python'))

try:
    from abacus_client import AbacusClient
    from contextual_memory import ContextualMemorySystem
    from intelligent_reports import IntelligentReportGenerator
except ImportError as e:
    print(f"‚ùå ERRO: N√£o foi poss√≠vel importar m√≥dulos: {e}")
    print("   Certifique-se de que todos os arquivos da Fase 1 est√£o presentes")
    sys.exit(1)

async def test_contextual_memory():
    """Testa o sistema de mem√≥ria contextual"""
    print("\nüìã Teste 1: Sistema de Mem√≥ria Contextual")
    print("-" * 50)
    
    try:
        # Inicializar sistema de mem√≥ria
        memory = ContextualMemorySystem()
        print("‚úÖ Sistema de mem√≥ria inicializado")
        
        # Adicionar mem√≥rias de teste
        memory_id1 = memory.add_memory(
            content="Usu√°rio mencionou que tem reuni√£o importante na sexta-feira √†s 14h",
            user_id="test_user",
            category="agenda",
            importance=0.8,
            metadata={"type": "meeting", "day": "friday", "time": "14:00"}
        )
        print(f"‚úÖ Mem√≥ria 1 adicionada: {memory_id1}")
        
        memory_id2 = memory.add_memory(
            content="Usu√°rio est√° trabalhando no projeto BestStag v9.1 com integra√ß√£o Abacus.AI",
            user_id="test_user",
            category="projeto",
            importance=0.9,
            metadata={"project": "beststag", "version": "9.1", "technology": "abacus"}
        )
        print(f"‚úÖ Mem√≥ria 2 adicionada: {memory_id2}")
        
        memory_id3 = memory.add_memory(
            content="Usu√°rio demonstrou interesse em automa√ß√£o de tarefas e relat√≥rios inteligentes",
            user_id="test_user",
            category="preferencias",
            importance=0.7,
            metadata={"interest": "automation", "feature": "reports"}
        )
        print(f"‚úÖ Mem√≥ria 3 adicionada: {memory_id3}")
        
        # Teste de busca sem√¢ntica
        print("\nüîç Testando busca sem√¢ntica:")
        
        # Busca 1: Reuni√£o
        results = memory.search_memory("reuni√£o sexta", user_id="test_user", top_k=2)
        print(f"  Busca 'reuni√£o sexta': {len(results)} resultados")
        for result in results:
            score = result.metadata.get('similarity_score', 0)
            print(f"    - {result.content[:50]}... (score: {score:.3f})")
        
        # Busca 2: Projeto
        results = memory.search_memory("projeto desenvolvimento", user_id="test_user", top_k=2)
        print(f"  Busca 'projeto desenvolvimento': {len(results)} resultados")
        for result in results:
            score = result.metadata.get('similarity_score', 0)
            print(f"    - {result.content[:50]}... (score: {score:.3f})")
        
        # Busca 3: Automa√ß√£o
        results = memory.search_memory("automatizar relat√≥rios", user_id="test_user", top_k=2)
        print(f"  Busca 'automatizar relat√≥rios': {len(results)} resultados")
        for result in results:
            score = result.metadata.get('similarity_score', 0)
            print(f"    - {result.content[:50]}... (score: {score:.3f})")
        
        # Teste de contexto do usu√°rio
        print("\nüë§ Testando contexto do usu√°rio:")
        context = memory.get_user_context("test_user")
        print(f"  Total de itens: {context['total_items']}")
        print(f"  Categorias: {context['categories']}")
        print(f"  Import√¢ncia m√©dia: {context['avg_importance']:.2f}")
        print(f"  Mais recente: {context['most_recent'][:50]}...")
        
        # Estat√≠sticas
        print("\nüìä Estat√≠sticas da mem√≥ria:")
        stats = memory.get_stats()
        print(f"  Total de itens: {stats['total_items']}")
        print(f"  Usu√°rios √∫nicos: {stats['total_users']}")
        print(f"  Categorias: {list(stats['categories'].keys())}")
        print(f"  Dimens√£o dos embeddings: {stats['embedding_dim']}")
        print(f"  Modelo usado: {stats['model_name']}")
        
        # Salvar mem√≥ria
        memory.save_memory()
        print("‚úÖ Mem√≥ria salva com sucesso")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO no teste de mem√≥ria contextual: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_intelligent_reports():
    """Testa o sistema de relat√≥rios inteligentes"""
    print("\nüìã Teste 2: Sistema de Relat√≥rios Inteligentes")
    print("-" * 50)
    
    try:
        # Verificar se API key est√° configurada
        api_key = os.getenv("ABACUS_API_KEY")
        if not api_key:
            print("‚ö†Ô∏è  AVISO: ABACUS_API_KEY n√£o configurada, usando modo simula√ß√£o")
            return True
        
        # Inicializar componentes
        abacus_client = AbacusClient(api_key=api_key)
        memory_system = ContextualMemorySystem()
        report_generator = IntelligentReportGenerator(abacus_client, memory_system)
        print("‚úÖ Gerador de relat√≥rios inicializado")
        
        # Teste de health check
        if not abacus_client.health_check():
            print("‚ö†Ô∏è  AVISO: API Abacus.AI n√£o est√° respondendo, usando modo simula√ß√£o")
            return True
        
        # Gerar relat√≥rio semanal
        print("\nüìä Gerando relat√≥rio semanal...")
        weekly_report = await report_generator.generate_weekly_report("test_user")
        
        print(f"‚úÖ Relat√≥rio semanal gerado:")
        print(f"  Usu√°rio: {weekly_report.user_id}")
        print(f"  Per√≠odo: {weekly_report.period_start.date()} a {weekly_report.period_end.date()}")
        print(f"  Score de Produtividade: {weekly_report.productivity_score:.2f}")
        print(f"  Score de Bem-estar: {weekly_report.wellbeing_score:.2f}")
        print(f"  Insights: {len(weekly_report.insights)}")
        print(f"  Recomenda√ß√µes: {len(weekly_report.recommendations)}")
        print(f"  Tend√™ncias: {len(weekly_report.trends)}")
        
        # Exibir insights
        if weekly_report.insights:
            print("\nüí° Principais Insights:")
            for i, insight in enumerate(weekly_report.insights[:3], 1):
                print(f"  {i}. {insight}")
        
        # Exibir recomenda√ß√µes
        if weekly_report.recommendations:
            print("\nüéØ Principais Recomenda√ß√µes:")
            for i, rec in enumerate(weekly_report.recommendations[:3], 1):
                print(f"  {i}. {rec}")
        
        # Exibir tend√™ncias
        if weekly_report.trends:
            print("\nüìà Tend√™ncias:")
            for trend in weekly_report.trends:
                direction_emoji = "‚ÜóÔ∏è" if trend["direction"] == "up" else "‚ÜòÔ∏è" if trend["direction"] == "down" else "‚û°Ô∏è"
                print(f"  {direction_emoji} {trend['metric']}: {trend['change']} - {trend['description']}")
        
        # Salvar relat√≥rio
        filename = report_generator.save_report(weekly_report)
        print(f"‚úÖ Relat√≥rio salvo em: {filename}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO no teste de relat√≥rios inteligentes: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_frontend_structure():
    """Testa a estrutura do frontend"""
    print("\nüìã Teste 3: Estrutura do Frontend")
    print("-" * 50)
    
    try:
        # Verificar arquivos do frontend
        frontend_files = [
            'frontend/hooks/useAI.ts',
            'frontend/components/AIComponents.tsx'
        ]
        
        for file_path in frontend_files:
            full_path = os.path.join(os.path.dirname(__file__), file_path)
            if os.path.exists(full_path):
                print(f"‚úÖ Arquivo encontrado: {file_path}")
                
                # Verificar tamanho do arquivo
                size = os.path.getsize(full_path)
                print(f"   Tamanho: {size} bytes")
                
                # Verificar se cont√©m exports esperados
                with open(full_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                if 'useAI.ts' in file_path:
                    expected_hooks = [
                        'useSentiment',
                        'useIntelligentChat',
                        'useAIInsights',
                        'useProductivityAnalysis'
                    ]
                    
                    for hook in expected_hooks:
                        if hook in content:
                            print(f"   ‚úÖ Hook encontrado: {hook}")
                        else:
                            print(f"   ‚ùå Hook n√£o encontrado: {hook}")
                
                elif 'AIComponents.tsx' in file_path:
                    expected_components = [
                        'IntelligentChat',
                        'AIInsightsPanel',
                        'ProductivityDashboard',
                        'RecommendationsPanel'
                    ]
                    
                    for component in expected_components:
                        if component in content:
                            print(f"   ‚úÖ Componente encontrado: {component}")
                        else:
                            print(f"   ‚ùå Componente n√£o encontrado: {component}")
            else:
                print(f"‚ùå Arquivo n√£o encontrado: {file_path}")
                return False
        
        print("‚úÖ Estrutura do frontend validada")
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO no teste de estrutura do frontend: {e}")
        return False

def test_dependencies():
    """Testa se as depend√™ncias est√£o instaladas"""
    print("\nüìã Teste 4: Depend√™ncias")
    print("-" * 50)
    
    dependencies = [
        ('requests', 'requests'),
        ('numpy', 'numpy'),
        ('sentence_transformers', 'sentence-transformers'),
        ('faiss', 'faiss-cpu'),
        ('dotenv', 'python-dotenv')
    ]
    
    missing_deps = []
    
    for module_name, package_name in dependencies:
        try:
            __import__(module_name)
            print(f"‚úÖ {package_name} instalado")
        except ImportError:
            print(f"‚ùå {package_name} N√ÉO instalado")
            missing_deps.append(package_name)
    
    if missing_deps:
        print(f"\n‚ö†Ô∏è  Depend√™ncias faltando: {', '.join(missing_deps)}")
        print("   Instale com: pip install " + " ".join(missing_deps))
        return False
    
    print("‚úÖ Todas as depend√™ncias est√£o instaladas")
    return True

async def main():
    """Fun√ß√£o principal"""
    print("üîß BestStag v9.1 + Abacus.AI - Teste da Fase 2")
    print("IA Contextual e Front-end Inteligente")
    print("=" * 60)
    
    success = True
    
    # Teste 1: Depend√™ncias
    if not test_dependencies():
        success = False
    
    # Teste 2: Estrutura do frontend
    if not test_frontend_structure():
        success = False
    
    # Teste 3: Sistema de mem√≥ria contextual
    if not await test_contextual_memory():
        success = False
    
    # Teste 4: Sistema de relat√≥rios inteligentes
    if not await test_intelligent_reports():
        success = False
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ SUCESSO: Todos os testes da Fase 2 passaram!")
        print("‚úÖ BestStag v9.1 + Abacus.AI Fase 2 est√° funcionando")
        print("\nüìù Funcionalidades implementadas:")
        print("   ‚úÖ Sistema de mem√≥ria contextual com embeddings")
        print("   ‚úÖ Hooks React inteligentes")
        print("   ‚úÖ Componentes React com IA")
        print("   ‚úÖ Sistema de relat√≥rios inteligentes")
        print("   ‚úÖ An√°lise de produtividade e bem-estar")
        print("\nüöÄ Pronto para avan√ßar para a Fase 3!")
    else:
        print("‚ùå FALHA: Alguns testes da Fase 2 falharam")
        print("üîß Verifique a configura√ß√£o e depend√™ncias")
    
    return success

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)

